//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\phmarques\Documents\GitHub\NCalc2\NCalc2\NCalc2.g4 by ANTLR 4.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace NCalc2.Grammar {

using System;
using System.Text;
using System.Globalization;
using System.Collections.Generic;
using NCalc2.Expressions;
using ValueType = NCalc2.Expressions.ValueType;

using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.3")]
[System.CLSCompliant(false)]
public partial class NCalc2Lexer : Lexer {
	public const int
		T__29=1, T__28=2, T__27=3, T__26=4, T__25=5, T__24=6, T__23=7, T__22=8, 
		T__21=9, T__20=10, T__19=11, T__18=12, T__17=13, T__16=14, T__15=15, T__14=16, 
		T__13=17, T__12=18, T__11=19, T__10=20, T__9=21, T__8=22, T__7=23, T__6=24, 
		T__5=25, T__4=26, T__3=27, T__2=28, T__1=29, T__0=30, TRUE=31, FALSE=32, 
		NAME=33, INTEGER=34, DATETIME=35, VAR=36, E=37, FLOAT=38, STRING=39, WS=40;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] tokenNames = {
		"'\\u0000'", "'\\u0001'", "'\\u0002'", "'\\u0003'", "'\\u0004'", "'\\u0005'", 
		"'\\u0006'", "'\\u0007'", "'\b'", "'\t'", "'\n'", "'\\u000B'", "'\f'", 
		"'\r'", "'\\u000E'", "'\\u000F'", "'\\u0010'", "'\\u0011'", "'\\u0012'", 
		"'\\u0013'", "'\\u0014'", "'\\u0015'", "'\\u0016'", "'\\u0017'", "'\\u0018'", 
		"'\\u0019'", "'\\u001A'", "'\\u001B'", "'\\u001C'", "'\\u001D'", "'\\u001E'", 
		"'\\u001F'", "' '", "'!'", "'\"'", "'#'", "'$'", "'%'", "'&'", "'''", 
		"'('"
	};
	public static readonly string[] ruleNames = {
		"T__29", "T__28", "T__27", "T__26", "T__25", "T__24", "T__23", "T__22", 
		"T__21", "T__20", "T__19", "T__18", "T__17", "T__16", "T__15", "T__14", 
		"T__13", "T__12", "T__11", "T__10", "T__9", "T__8", "T__7", "T__6", "T__5", 
		"T__4", "T__3", "T__2", "T__1", "T__0", "TRUE", "FALSE", "NAME", "INTEGER", 
		"DATETIME", "VAR", "E", "FLOAT", "STRING", "LETTER", "DIGIT", "EscapeSequence", 
		"HexDigit", "UnicodeEscape", "WS"
	};


	private const char BS = '\\';
	private static NumberFormatInfo numberFormatInfo = new NumberFormatInfo();

	private string extractString(string text) {
	    
	    StringBuilder sb = new StringBuilder(text);
	    int startIndex = 1; // Skip initial quote
	    int slashIndex = -1;

	    while ((slashIndex = sb.ToString().IndexOf(BS, startIndex)) != -1)
	    {
	        char escapeType = sb[slashIndex + 1];
	        switch (escapeType)
	        {
	            case 'u':
	              string hcode = String.Concat(sb[slashIndex+4], sb[slashIndex+5]);
	              string lcode = String.Concat(sb[slashIndex+2], sb[slashIndex+3]);
	              char unicodeChar = Encoding.Unicode.GetChars(new byte[] { System.Convert.ToByte(hcode, 16), System.Convert.ToByte(lcode, 16)} )[0];
	              sb.Remove(slashIndex, 6).Insert(slashIndex, unicodeChar); 
	              break;
	            case 'n': sb.Remove(slashIndex, 2).Insert(slashIndex, '\n'); break;
	            case 'r': sb.Remove(slashIndex, 2).Insert(slashIndex, '\r'); break;
	            case 't': sb.Remove(slashIndex, 2).Insert(slashIndex, '\t'); break;
	            case '\'': sb.Remove(slashIndex, 2).Insert(slashIndex, '\''); break;
	            case '\\': sb.Remove(slashIndex, 2).Insert(slashIndex, '\\'); break;
	            default: throw new Exception("Unvalid escape sequence: \\" + escapeType);
	        }

	        startIndex = slashIndex + 1;

	    }

	    sb.Remove(0, 1);
	    sb.Remove(sb.Length - 1, 1);

	    return sb.ToString();
	}


	public NCalc2Lexer(ICharStream input)
		: base(input)
	{
		_interp = new LexerATNSimulator(this,_ATN);
	}

	public override string GrammarFileName { get { return "NCalc2.g4"; } }

	public override string[] TokenNames { get { return tokenNames; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x2*\x111\b\x1\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x4\x3\x4"+
		"\x3\x4\x3\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3\a\x3\a\x3\a\x3\b\x3\b\x3"+
		"\t\x3\t\x3\n\x3\n\x3\v\x3\v\x3\v\x3\f\x3\f\x3\r\x3\r\x3\xE\x3\xE\x3\xF"+
		"\x3\xF\x3\x10\x3\x10\x3\x11\x3\x11\x3\x11\x3\x12\x3\x12\x3\x13\x3\x13"+
		"\x3\x13\x3\x14\x3\x14\x3\x15\x3\x15\x3\x16\x3\x16\x3\x17\x3\x17\x3\x17"+
		"\x3\x18\x3\x18\x3\x19\x3\x19\x3\x19\x3\x1A\x3\x1A\x3\x1B\x3\x1B\x3\x1C"+
		"\x3\x1C\x3\x1C\x3\x1C\x3\x1D\x3\x1D\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1F"+
		"\x3\x1F\x3 \x3 \x3 \x3 \x3 \x3!\x3!\x3!\x3!\x3!\x3!\x3\"\x3\"\x3\"\a\""+
		"\xB6\n\"\f\"\xE\"\xB9\v\"\x3#\x6#\xBC\n#\r#\xE#\xBD\x3$\x3$\a$\xC2\n$"+
		"\f$\xE$\xC5\v$\x3$\x3$\x3%\x3%\a%\xCB\n%\f%\xE%\xCE\v%\x3%\x3%\x3&\x3"+
		"&\x5&\xD4\n&\x3&\x6&\xD7\n&\r&\xE&\xD8\x3\'\a\'\xDC\n\'\f\'\xE\'\xDF\v"+
		"\'\x3\'\x3\'\x6\'\xE3\n\'\r\'\xE\'\xE4\x3\'\x5\'\xE8\n\'\x3\'\x6\'\xEB"+
		"\n\'\r\'\xE\'\xEC\x3\'\x3\'\x5\'\xF1\n\'\x3(\x3(\x3(\a(\xF6\n(\f(\xE("+
		"\xF9\v(\x3(\x3(\x3)\x3)\x3*\x3*\x3+\x3+\x3+\x5+\x104\n+\x3,\x3,\x3-\x3"+
		"-\x3-\x3-\x3-\x3-\x3.\x3.\x3.\x3.\x2\x2\x2/\x3\x2\x3\x5\x2\x4\a\x2\x5"+
		"\t\x2\x6\v\x2\a\r\x2\b\xF\x2\t\x11\x2\n\x13\x2\v\x15\x2\f\x17\x2\r\x19"+
		"\x2\xE\x1B\x2\xF\x1D\x2\x10\x1F\x2\x11!\x2\x12#\x2\x13%\x2\x14\'\x2\x15"+
		")\x2\x16+\x2\x17-\x2\x18/\x2\x19\x31\x2\x1A\x33\x2\x1B\x35\x2\x1C\x37"+
		"\x2\x1D\x39\x2\x1E;\x2\x1F=\x2 ?\x2!\x41\x2\"\x43\x2#\x45\x2$G\x2%I\x2"+
		"&K\x2\'M\x2(O\x2)Q\x2\x2S\x2\x2U\x2\x2W\x2\x2Y\x2\x2[\x2*\x3\x2\v\x3\x2"+
		"%%\x3\x2__\x4\x2GGgg\x4\x2--//\x5\x2\x2!))^^\x5\x2\x43\\\x61\x61\x63|"+
		"\a\x2))^^ppttvv\x5\x2\x32;\x43H\x63h\x5\x2\v\f\xE\xF\"\"\x11A\x2\x3\x3"+
		"\x2\x2\x2\x2\x5\x3\x2\x2\x2\x2\a\x3\x2\x2\x2\x2\t\x3\x2\x2\x2\x2\v\x3"+
		"\x2\x2\x2\x2\r\x3\x2\x2\x2\x2\xF\x3\x2\x2\x2\x2\x11\x3\x2\x2\x2\x2\x13"+
		"\x3\x2\x2\x2\x2\x15\x3\x2\x2\x2\x2\x17\x3\x2\x2\x2\x2\x19\x3\x2\x2\x2"+
		"\x2\x1B\x3\x2\x2\x2\x2\x1D\x3\x2\x2\x2\x2\x1F\x3\x2\x2\x2\x2!\x3\x2\x2"+
		"\x2\x2#\x3\x2\x2\x2\x2%\x3\x2\x2\x2\x2\'\x3\x2\x2\x2\x2)\x3\x2\x2\x2\x2"+
		"+\x3\x2\x2\x2\x2-\x3\x2\x2\x2\x2/\x3\x2\x2\x2\x2\x31\x3\x2\x2\x2\x2\x33"+
		"\x3\x2\x2\x2\x2\x35\x3\x2\x2\x2\x2\x37\x3\x2\x2\x2\x2\x39\x3\x2\x2\x2"+
		"\x2;\x3\x2\x2\x2\x2=\x3\x2\x2\x2\x2?\x3\x2\x2\x2\x2\x41\x3\x2\x2\x2\x2"+
		"\x43\x3\x2\x2\x2\x2\x45\x3\x2\x2\x2\x2G\x3\x2\x2\x2\x2I\x3\x2\x2\x2\x2"+
		"K\x3\x2\x2\x2\x2M\x3\x2\x2\x2\x2O\x3\x2\x2\x2\x2[\x3\x2\x2\x2\x3]\x3\x2"+
		"\x2\x2\x5_\x3\x2\x2\x2\a\x62\x3\x2\x2\x2\t\x65\x3\x2\x2\x2\vh\x3\x2\x2"+
		"\x2\rk\x3\x2\x2\x2\xFn\x3\x2\x2\x2\x11p\x3\x2\x2\x2\x13r\x3\x2\x2\x2\x15"+
		"t\x3\x2\x2\x2\x17w\x3\x2\x2\x2\x19y\x3\x2\x2\x2\x1B{\x3\x2\x2\x2\x1D}"+
		"\x3\x2\x2\x2\x1F\x7F\x3\x2\x2\x2!\x81\x3\x2\x2\x2#\x84\x3\x2\x2\x2%\x86"+
		"\x3\x2\x2\x2\'\x89\x3\x2\x2\x2)\x8B\x3\x2\x2\x2+\x8D\x3\x2\x2\x2-\x8F"+
		"\x3\x2\x2\x2/\x92\x3\x2\x2\x2\x31\x94\x3\x2\x2\x2\x33\x97\x3\x2\x2\x2"+
		"\x35\x99\x3\x2\x2\x2\x37\x9B\x3\x2\x2\x2\x39\x9F\x3\x2\x2\x2;\xA1\x3\x2"+
		"\x2\x2=\xA5\x3\x2\x2\x2?\xA7\x3\x2\x2\x2\x41\xAC\x3\x2\x2\x2\x43\xB2\x3"+
		"\x2\x2\x2\x45\xBB\x3\x2\x2\x2G\xBF\x3\x2\x2\x2I\xC8\x3\x2\x2\x2K\xD1\x3"+
		"\x2\x2\x2M\xF0\x3\x2\x2\x2O\xF2\x3\x2\x2\x2Q\xFC\x3\x2\x2\x2S\xFE\x3\x2"+
		"\x2\x2U\x100\x3\x2\x2\x2W\x105\x3\x2\x2\x2Y\x107\x3\x2\x2\x2[\x10D\x3"+
		"\x2\x2\x2]^\a\x31\x2\x2^\x4\x3\x2\x2\x2_`\a#\x2\x2`\x61\a?\x2\x2\x61\x6"+
		"\x3\x2\x2\x2\x62\x63\a~\x2\x2\x63\x64\a~\x2\x2\x64\b\x3\x2\x2\x2\x65\x66"+
		"\a@\x2\x2\x66g\a@\x2\x2g\n\x3\x2\x2\x2hi\a>\x2\x2ij\a>\x2\x2j\f\x3\x2"+
		"\x2\x2kl\a(\x2\x2lm\a(\x2\x2m\xE\x3\x2\x2\x2no\a?\x2\x2o\x10\x3\x2\x2"+
		"\x2pq\a`\x2\x2q\x12\x3\x2\x2\x2rs\a\x41\x2\x2s\x14\x3\x2\x2\x2tu\a>\x2"+
		"\x2uv\a?\x2\x2v\x16\x3\x2\x2\x2wx\a(\x2\x2x\x18\x3\x2\x2\x2yz\a*\x2\x2"+
		"z\x1A\x3\x2\x2\x2{|\a,\x2\x2|\x1C\x3\x2\x2\x2}~\a.\x2\x2~\x1E\x3\x2\x2"+
		"\x2\x7F\x80\a<\x2\x2\x80 \x3\x2\x2\x2\x81\x82\a@\x2\x2\x82\x83\a?\x2\x2"+
		"\x83\"\x3\x2\x2\x2\x84\x85\a>\x2\x2\x85$\x3\x2\x2\x2\x86\x87\a?\x2\x2"+
		"\x87\x88\a?\x2\x2\x88&\x3\x2\x2\x2\x89\x8A\a~\x2\x2\x8A(\x3\x2\x2\x2\x8B"+
		"\x8C\a\x80\x2\x2\x8C*\x3\x2\x2\x2\x8D\x8E\a@\x2\x2\x8E,\x3\x2\x2\x2\x8F"+
		"\x90\aq\x2\x2\x90\x91\at\x2\x2\x91.\x3\x2\x2\x2\x92\x93\a#\x2\x2\x93\x30"+
		"\x3\x2\x2\x2\x94\x95\a>\x2\x2\x95\x96\a@\x2\x2\x96\x32\x3\x2\x2\x2\x97"+
		"\x98\a\'\x2\x2\x98\x34\x3\x2\x2\x2\x99\x9A\a+\x2\x2\x9A\x36\x3\x2\x2\x2"+
		"\x9B\x9C\a\x63\x2\x2\x9C\x9D\ap\x2\x2\x9D\x9E\a\x66\x2\x2\x9E\x38\x3\x2"+
		"\x2\x2\x9F\xA0\a-\x2\x2\xA0:\x3\x2\x2\x2\xA1\xA2\ap\x2\x2\xA2\xA3\aq\x2"+
		"\x2\xA3\xA4\av\x2\x2\xA4<\x3\x2\x2\x2\xA5\xA6\a/\x2\x2\xA6>\x3\x2\x2\x2"+
		"\xA7\xA8\av\x2\x2\xA8\xA9\at\x2\x2\xA9\xAA\aw\x2\x2\xAA\xAB\ag\x2\x2\xAB"+
		"@\x3\x2\x2\x2\xAC\xAD\ah\x2\x2\xAD\xAE\a\x63\x2\x2\xAE\xAF\an\x2\x2\xAF"+
		"\xB0\au\x2\x2\xB0\xB1\ag\x2\x2\xB1\x42\x3\x2\x2\x2\xB2\xB7\x5Q)\x2\xB3"+
		"\xB6\x5Q)\x2\xB4\xB6\x5S*\x2\xB5\xB3\x3\x2\x2\x2\xB5\xB4\x3\x2\x2\x2\xB6"+
		"\xB9\x3\x2\x2\x2\xB7\xB5\x3\x2\x2\x2\xB7\xB8\x3\x2\x2\x2\xB8\x44\x3\x2"+
		"\x2\x2\xB9\xB7\x3\x2\x2\x2\xBA\xBC\x5S*\x2\xBB\xBA\x3\x2\x2\x2\xBC\xBD"+
		"\x3\x2\x2\x2\xBD\xBB\x3\x2\x2\x2\xBD\xBE\x3\x2\x2\x2\xBE\x46\x3\x2\x2"+
		"\x2\xBF\xC3\a%\x2\x2\xC0\xC2\n\x2\x2\x2\xC1\xC0\x3\x2\x2\x2\xC2\xC5\x3"+
		"\x2\x2\x2\xC3\xC1\x3\x2\x2\x2\xC3\xC4\x3\x2\x2\x2\xC4\xC6\x3\x2\x2\x2"+
		"\xC5\xC3\x3\x2\x2\x2\xC6\xC7\a%\x2\x2\xC7H\x3\x2\x2\x2\xC8\xCC\a]\x2\x2"+
		"\xC9\xCB\n\x3\x2\x2\xCA\xC9\x3\x2\x2\x2\xCB\xCE\x3\x2\x2\x2\xCC\xCA\x3"+
		"\x2\x2\x2\xCC\xCD\x3\x2\x2\x2\xCD\xCF\x3\x2\x2\x2\xCE\xCC\x3\x2\x2\x2"+
		"\xCF\xD0\a_\x2\x2\xD0J\x3\x2\x2\x2\xD1\xD3\t\x4\x2\x2\xD2\xD4\t\x5\x2"+
		"\x2\xD3\xD2\x3\x2\x2\x2\xD3\xD4\x3\x2\x2\x2\xD4\xD6\x3\x2\x2\x2\xD5\xD7"+
		"\x5S*\x2\xD6\xD5\x3\x2\x2\x2\xD7\xD8\x3\x2\x2\x2\xD8\xD6\x3\x2\x2\x2\xD8"+
		"\xD9\x3\x2\x2\x2\xD9L\x3\x2\x2\x2\xDA\xDC\x5S*\x2\xDB\xDA\x3\x2\x2\x2"+
		"\xDC\xDF\x3\x2\x2\x2\xDD\xDB\x3\x2\x2\x2\xDD\xDE\x3\x2\x2\x2\xDE\xE0\x3"+
		"\x2\x2\x2\xDF\xDD\x3\x2\x2\x2\xE0\xE2\a\x30\x2\x2\xE1\xE3\x5S*\x2\xE2"+
		"\xE1\x3\x2\x2\x2\xE3\xE4\x3\x2\x2\x2\xE4\xE2\x3\x2\x2\x2\xE4\xE5\x3\x2"+
		"\x2\x2\xE5\xE7\x3\x2\x2\x2\xE6\xE8\x5K&\x2\xE7\xE6\x3\x2\x2\x2\xE7\xE8"+
		"\x3\x2\x2\x2\xE8\xF1\x3\x2\x2\x2\xE9\xEB\x5S*\x2\xEA\xE9\x3\x2\x2\x2\xEB"+
		"\xEC\x3\x2\x2\x2\xEC\xEA\x3\x2\x2\x2\xEC\xED\x3\x2\x2\x2\xED\xEE\x3\x2"+
		"\x2\x2\xEE\xEF\x5K&\x2\xEF\xF1\x3\x2\x2\x2\xF0\xDD\x3\x2\x2\x2\xF0\xEA"+
		"\x3\x2\x2\x2\xF1N\x3\x2\x2\x2\xF2\xF7\a)\x2\x2\xF3\xF6\x5U+\x2\xF4\xF6"+
		"\n\x6\x2\x2\xF5\xF3\x3\x2\x2\x2\xF5\xF4\x3\x2\x2\x2\xF6\xF9\x3\x2\x2\x2"+
		"\xF7\xF5\x3\x2\x2\x2\xF7\xF8\x3\x2\x2\x2\xF8\xFA\x3\x2\x2\x2\xF9\xF7\x3"+
		"\x2\x2\x2\xFA\xFB\a)\x2\x2\xFBP\x3\x2\x2\x2\xFC\xFD\t\a\x2\x2\xFDR\x3"+
		"\x2\x2\x2\xFE\xFF\x4\x32;\x2\xFFT\x3\x2\x2\x2\x100\x103\a^\x2\x2\x101"+
		"\x104\t\b\x2\x2\x102\x104\x5Y-\x2\x103\x101\x3\x2\x2\x2\x103\x102\x3\x2"+
		"\x2\x2\x104V\x3\x2\x2\x2\x105\x106\t\t\x2\x2\x106X\x3\x2\x2\x2\x107\x108"+
		"\aw\x2\x2\x108\x109\x5W,\x2\x109\x10A\x5W,\x2\x10A\x10B\x5W,\x2\x10B\x10C"+
		"\x5W,\x2\x10CZ\x3\x2\x2\x2\x10D\x10E\t\n\x2\x2\x10E\x10F\x3\x2\x2\x2\x10F"+
		"\x110\b.\x2\x2\x110\\\x3\x2\x2\x2\x12\x2\xB5\xB7\xBD\xC3\xCC\xD3\xD8\xDD"+
		"\xE4\xE7\xEC\xF0\xF5\xF7\x103\x3\b\x2\x2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace NCalc2.Grammar
